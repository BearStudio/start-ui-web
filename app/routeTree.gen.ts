/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ManagerImport } from './routes/manager'
import { Route as AppImport } from './routes/app'
import { Route as PublicOnlyImport } from './routes/_public-only'
import { Route as IndexImport } from './routes/index'
import { Route as ManagerIndexImport } from './routes/manager/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as PlanetIdImport } from './routes/planet.$id'
import { Route as PublicOnlyLoginImport } from './routes/_public-only/login'
import { Route as PublicOnlyLoginIndexImport } from './routes/_public-only/login.index'
import { Route as PublicOnlyLoginErrorImport } from './routes/_public-only/login.error'
import { Route as PublicOnlyLoginVerifyIndexImport } from './routes/_public-only/login.verify.index'

// Create/Update Routes

const ManagerRoute = ManagerImport.update({
  id: '/manager',
  path: '/manager',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const PublicOnlyRoute = PublicOnlyImport.update({
  id: '/_public-only',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManagerIndexRoute = ManagerIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManagerRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const PlanetIdRoute = PlanetIdImport.update({
  id: '/planet/$id',
  path: '/planet/$id',
  getParentRoute: () => rootRoute,
} as any)

const PublicOnlyLoginRoute = PublicOnlyLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicOnlyRoute,
} as any)

const PublicOnlyLoginIndexRoute = PublicOnlyLoginIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicOnlyLoginRoute,
} as any)

const PublicOnlyLoginErrorRoute = PublicOnlyLoginErrorImport.update({
  id: '/error',
  path: '/error',
  getParentRoute: () => PublicOnlyLoginRoute,
} as any)

const PublicOnlyLoginVerifyIndexRoute = PublicOnlyLoginVerifyIndexImport.update(
  {
    id: '/verify/',
    path: '/verify/',
    getParentRoute: () => PublicOnlyLoginRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_public-only': {
      id: '/_public-only'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicOnlyImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerImport
      parentRoute: typeof rootRoute
    }
    '/_public-only/login': {
      id: '/_public-only/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicOnlyLoginImport
      parentRoute: typeof PublicOnlyImport
    }
    '/planet/$id': {
      id: '/planet/$id'
      path: '/planet/$id'
      fullPath: '/planet/$id'
      preLoaderRoute: typeof PlanetIdImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/manager/': {
      id: '/manager/'
      path: '/'
      fullPath: '/manager/'
      preLoaderRoute: typeof ManagerIndexImport
      parentRoute: typeof ManagerImport
    }
    '/_public-only/login/error': {
      id: '/_public-only/login/error'
      path: '/error'
      fullPath: '/login/error'
      preLoaderRoute: typeof PublicOnlyLoginErrorImport
      parentRoute: typeof PublicOnlyLoginImport
    }
    '/_public-only/login/': {
      id: '/_public-only/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof PublicOnlyLoginIndexImport
      parentRoute: typeof PublicOnlyLoginImport
    }
    '/_public-only/login/verify/': {
      id: '/_public-only/login/verify/'
      path: '/verify'
      fullPath: '/login/verify'
      preLoaderRoute: typeof PublicOnlyLoginVerifyIndexImport
      parentRoute: typeof PublicOnlyLoginImport
    }
  }
}

// Create and export the route tree

interface PublicOnlyLoginRouteChildren {
  PublicOnlyLoginErrorRoute: typeof PublicOnlyLoginErrorRoute
  PublicOnlyLoginIndexRoute: typeof PublicOnlyLoginIndexRoute
  PublicOnlyLoginVerifyIndexRoute: typeof PublicOnlyLoginVerifyIndexRoute
}

const PublicOnlyLoginRouteChildren: PublicOnlyLoginRouteChildren = {
  PublicOnlyLoginErrorRoute: PublicOnlyLoginErrorRoute,
  PublicOnlyLoginIndexRoute: PublicOnlyLoginIndexRoute,
  PublicOnlyLoginVerifyIndexRoute: PublicOnlyLoginVerifyIndexRoute,
}

const PublicOnlyLoginRouteWithChildren = PublicOnlyLoginRoute._addFileChildren(
  PublicOnlyLoginRouteChildren,
)

interface PublicOnlyRouteChildren {
  PublicOnlyLoginRoute: typeof PublicOnlyLoginRouteWithChildren
}

const PublicOnlyRouteChildren: PublicOnlyRouteChildren = {
  PublicOnlyLoginRoute: PublicOnlyLoginRouteWithChildren,
}

const PublicOnlyRouteWithChildren = PublicOnlyRoute._addFileChildren(
  PublicOnlyRouteChildren,
)

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface ManagerRouteChildren {
  ManagerIndexRoute: typeof ManagerIndexRoute
}

const ManagerRouteChildren: ManagerRouteChildren = {
  ManagerIndexRoute: ManagerIndexRoute,
}

const ManagerRouteWithChildren =
  ManagerRoute._addFileChildren(ManagerRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PublicOnlyRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/manager': typeof ManagerRouteWithChildren
  '/login': typeof PublicOnlyLoginRouteWithChildren
  '/planet/$id': typeof PlanetIdRoute
  '/app/': typeof AppIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/login/error': typeof PublicOnlyLoginErrorRoute
  '/login/': typeof PublicOnlyLoginIndexRoute
  '/login/verify': typeof PublicOnlyLoginVerifyIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PublicOnlyRouteWithChildren
  '/planet/$id': typeof PlanetIdRoute
  '/app': typeof AppIndexRoute
  '/manager': typeof ManagerIndexRoute
  '/login/error': typeof PublicOnlyLoginErrorRoute
  '/login': typeof PublicOnlyLoginIndexRoute
  '/login/verify': typeof PublicOnlyLoginVerifyIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_public-only': typeof PublicOnlyRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/manager': typeof ManagerRouteWithChildren
  '/_public-only/login': typeof PublicOnlyLoginRouteWithChildren
  '/planet/$id': typeof PlanetIdRoute
  '/app/': typeof AppIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/_public-only/login/error': typeof PublicOnlyLoginErrorRoute
  '/_public-only/login/': typeof PublicOnlyLoginIndexRoute
  '/_public-only/login/verify/': typeof PublicOnlyLoginVerifyIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/app'
    | '/manager'
    | '/login'
    | '/planet/$id'
    | '/app/'
    | '/manager/'
    | '/login/error'
    | '/login/'
    | '/login/verify'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/planet/$id'
    | '/app'
    | '/manager'
    | '/login/error'
    | '/login'
    | '/login/verify'
  id:
    | '__root__'
    | '/'
    | '/_public-only'
    | '/app'
    | '/manager'
    | '/_public-only/login'
    | '/planet/$id'
    | '/app/'
    | '/manager/'
    | '/_public-only/login/error'
    | '/_public-only/login/'
    | '/_public-only/login/verify/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PublicOnlyRoute: typeof PublicOnlyRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
  ManagerRoute: typeof ManagerRouteWithChildren
  PlanetIdRoute: typeof PlanetIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PublicOnlyRoute: PublicOnlyRouteWithChildren,
  AppRoute: AppRouteWithChildren,
  ManagerRoute: ManagerRouteWithChildren,
  PlanetIdRoute: PlanetIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_public-only",
        "/app",
        "/manager",
        "/planet/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_public-only": {
      "filePath": "_public-only.tsx",
      "children": [
        "/_public-only/login"
      ]
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/"
      ]
    },
    "/manager": {
      "filePath": "manager.tsx",
      "children": [
        "/manager/"
      ]
    },
    "/_public-only/login": {
      "filePath": "_public-only/login.tsx",
      "parent": "/_public-only",
      "children": [
        "/_public-only/login/error",
        "/_public-only/login/",
        "/_public-only/login/verify/"
      ]
    },
    "/planet/$id": {
      "filePath": "planet.$id.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/manager/": {
      "filePath": "manager/index.tsx",
      "parent": "/manager"
    },
    "/_public-only/login/error": {
      "filePath": "_public-only/login.error.tsx",
      "parent": "/_public-only/login"
    },
    "/_public-only/login/": {
      "filePath": "_public-only/login.index.tsx",
      "parent": "/_public-only/login"
    },
    "/_public-only/login/verify/": {
      "filePath": "_public-only/login.verify.index.tsx",
      "parent": "/_public-only/login"
    }
  }
}
ROUTE_MANIFEST_END */
