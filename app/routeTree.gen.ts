/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ManagerImport } from './routes/manager'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/app'
import { Route as IndexImport } from './routes/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as PlanetIdImport } from './routes/planet.$id'
import { Route as ManagerLayoutImport } from './routes/manager/_layout'
import { Route as AppLayoutDesktopOnlyImport } from './routes/app/_layout-desktop-only'
import { Route as AppLayoutImport } from './routes/app/_layout'
import { Route as ManagerLayoutIndexImport } from './routes/manager/_layout/index'
import { Route as LoginVerifyIndexImport } from './routes/login/verify.index'
import { Route as LoginErrorIndexImport } from './routes/login/error.index'
import { Route as AppLayoutIndexImport } from './routes/app/_layout/index'
import { Route as ManagerLayoutUsersIndexImport } from './routes/manager/_layout/users.index'
import { Route as ManagerLayoutRepositoriesIndexImport } from './routes/manager/_layout/repositories.index'
import { Route as ManagerLayoutDashboardIndexImport } from './routes/manager/_layout/dashboard.index'
import { Route as ManagerLayoutAccountIndexImport } from './routes/manager/_layout/account.index'
import { Route as AppLayoutRepositoriesIndexImport } from './routes/app/_layout/repositories.index'
import { Route as AppLayoutAccountIndexImport } from './routes/app/_layout/account.index'
import { Route as ManagerLayoutRepositoriesIdIndexImport } from './routes/manager/_layout/repositories.$id.index'
import { Route as AppLayoutDesktopOnlyRepositoriesIdIndexImport } from './routes/app/_layout-desktop-only/repositories.$id.index'

// Create/Update Routes

const ManagerRoute = ManagerImport.update({
  id: '/manager',
  path: '/manager',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRoute,
} as any)

const PlanetIdRoute = PlanetIdImport.update({
  id: '/planet/$id',
  path: '/planet/$id',
  getParentRoute: () => rootRoute,
} as any)

const ManagerLayoutRoute = ManagerLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => ManagerRoute,
} as any)

const AppLayoutDesktopOnlyRoute = AppLayoutDesktopOnlyImport.update({
  id: '/_layout-desktop-only',
  getParentRoute: () => AppRoute,
} as any)

const AppLayoutRoute = AppLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AppRoute,
} as any)

const ManagerLayoutIndexRoute = ManagerLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManagerLayoutRoute,
} as any)

const LoginVerifyIndexRoute = LoginVerifyIndexImport.update({
  id: '/verify/',
  path: '/verify/',
  getParentRoute: () => LoginRoute,
} as any)

const LoginErrorIndexRoute = LoginErrorIndexImport.update({
  id: '/error/',
  path: '/error/',
  getParentRoute: () => LoginRoute,
} as any)

const AppLayoutIndexRoute = AppLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)

const ManagerLayoutUsersIndexRoute = ManagerLayoutUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => ManagerLayoutRoute,
} as any)

const ManagerLayoutRepositoriesIndexRoute =
  ManagerLayoutRepositoriesIndexImport.update({
    id: '/repositories/',
    path: '/repositories/',
    getParentRoute: () => ManagerLayoutRoute,
  } as any)

const ManagerLayoutDashboardIndexRoute =
  ManagerLayoutDashboardIndexImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => ManagerLayoutRoute,
  } as any)

const ManagerLayoutAccountIndexRoute = ManagerLayoutAccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => ManagerLayoutRoute,
} as any)

const AppLayoutRepositoriesIndexRoute = AppLayoutRepositoriesIndexImport.update(
  {
    id: '/repositories/',
    path: '/repositories/',
    getParentRoute: () => AppLayoutRoute,
  } as any,
)

const AppLayoutAccountIndexRoute = AppLayoutAccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => AppLayoutRoute,
} as any)

const ManagerLayoutRepositoriesIdIndexRoute =
  ManagerLayoutRepositoriesIdIndexImport.update({
    id: '/repositories/$id/',
    path: '/repositories/$id/',
    getParentRoute: () => ManagerLayoutRoute,
  } as any)

const AppLayoutDesktopOnlyRepositoriesIdIndexRoute =
  AppLayoutDesktopOnlyRepositoriesIdIndexImport.update({
    id: '/repositories/$id/',
    path: '/repositories/$id/',
    getParentRoute: () => AppLayoutDesktopOnlyRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerImport
      parentRoute: typeof rootRoute
    }
    '/app/_layout': {
      id: '/app/_layout'
      path: ''
      fullPath: '/app'
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof AppImport
    }
    '/app/_layout-desktop-only': {
      id: '/app/_layout-desktop-only'
      path: ''
      fullPath: '/app'
      preLoaderRoute: typeof AppLayoutDesktopOnlyImport
      parentRoute: typeof AppImport
    }
    '/manager/_layout': {
      id: '/manager/_layout'
      path: ''
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerLayoutImport
      parentRoute: typeof ManagerImport
    }
    '/planet/$id': {
      id: '/planet/$id'
      path: '/planet/$id'
      fullPath: '/planet/$id'
      preLoaderRoute: typeof PlanetIdImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof LoginImport
    }
    '/app/_layout/': {
      id: '/app/_layout/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppLayoutIndexImport
      parentRoute: typeof AppLayoutImport
    }
    '/login/error/': {
      id: '/login/error/'
      path: '/error'
      fullPath: '/login/error'
      preLoaderRoute: typeof LoginErrorIndexImport
      parentRoute: typeof LoginImport
    }
    '/login/verify/': {
      id: '/login/verify/'
      path: '/verify'
      fullPath: '/login/verify'
      preLoaderRoute: typeof LoginVerifyIndexImport
      parentRoute: typeof LoginImport
    }
    '/manager/_layout/': {
      id: '/manager/_layout/'
      path: '/'
      fullPath: '/manager/'
      preLoaderRoute: typeof ManagerLayoutIndexImport
      parentRoute: typeof ManagerLayoutImport
    }
    '/app/_layout/account/': {
      id: '/app/_layout/account/'
      path: '/account'
      fullPath: '/app/account'
      preLoaderRoute: typeof AppLayoutAccountIndexImport
      parentRoute: typeof AppLayoutImport
    }
    '/app/_layout/repositories/': {
      id: '/app/_layout/repositories/'
      path: '/repositories'
      fullPath: '/app/repositories'
      preLoaderRoute: typeof AppLayoutRepositoriesIndexImport
      parentRoute: typeof AppLayoutImport
    }
    '/manager/_layout/account/': {
      id: '/manager/_layout/account/'
      path: '/account'
      fullPath: '/manager/account'
      preLoaderRoute: typeof ManagerLayoutAccountIndexImport
      parentRoute: typeof ManagerLayoutImport
    }
    '/manager/_layout/dashboard/': {
      id: '/manager/_layout/dashboard/'
      path: '/dashboard'
      fullPath: '/manager/dashboard'
      preLoaderRoute: typeof ManagerLayoutDashboardIndexImport
      parentRoute: typeof ManagerLayoutImport
    }
    '/manager/_layout/repositories/': {
      id: '/manager/_layout/repositories/'
      path: '/repositories'
      fullPath: '/manager/repositories'
      preLoaderRoute: typeof ManagerLayoutRepositoriesIndexImport
      parentRoute: typeof ManagerLayoutImport
    }
    '/manager/_layout/users/': {
      id: '/manager/_layout/users/'
      path: '/users'
      fullPath: '/manager/users'
      preLoaderRoute: typeof ManagerLayoutUsersIndexImport
      parentRoute: typeof ManagerLayoutImport
    }
    '/app/_layout-desktop-only/repositories/$id/': {
      id: '/app/_layout-desktop-only/repositories/$id/'
      path: '/repositories/$id'
      fullPath: '/app/repositories/$id'
      preLoaderRoute: typeof AppLayoutDesktopOnlyRepositoriesIdIndexImport
      parentRoute: typeof AppLayoutDesktopOnlyImport
    }
    '/manager/_layout/repositories/$id/': {
      id: '/manager/_layout/repositories/$id/'
      path: '/repositories/$id'
      fullPath: '/manager/repositories/$id'
      preLoaderRoute: typeof ManagerLayoutRepositoriesIdIndexImport
      parentRoute: typeof ManagerLayoutImport
    }
  }
}

// Create and export the route tree

interface AppLayoutRouteChildren {
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
  AppLayoutAccountIndexRoute: typeof AppLayoutAccountIndexRoute
  AppLayoutRepositoriesIndexRoute: typeof AppLayoutRepositoriesIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutIndexRoute: AppLayoutIndexRoute,
  AppLayoutAccountIndexRoute: AppLayoutAccountIndexRoute,
  AppLayoutRepositoriesIndexRoute: AppLayoutRepositoriesIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AppLayoutDesktopOnlyRouteChildren {
  AppLayoutDesktopOnlyRepositoriesIdIndexRoute: typeof AppLayoutDesktopOnlyRepositoriesIdIndexRoute
}

const AppLayoutDesktopOnlyRouteChildren: AppLayoutDesktopOnlyRouteChildren = {
  AppLayoutDesktopOnlyRepositoriesIdIndexRoute:
    AppLayoutDesktopOnlyRepositoriesIdIndexRoute,
}

const AppLayoutDesktopOnlyRouteWithChildren =
  AppLayoutDesktopOnlyRoute._addFileChildren(AppLayoutDesktopOnlyRouteChildren)

interface AppRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
  AppLayoutDesktopOnlyRoute: typeof AppLayoutDesktopOnlyRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
  AppLayoutDesktopOnlyRoute: AppLayoutDesktopOnlyRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface LoginRouteChildren {
  LoginIndexRoute: typeof LoginIndexRoute
  LoginErrorIndexRoute: typeof LoginErrorIndexRoute
  LoginVerifyIndexRoute: typeof LoginVerifyIndexRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginIndexRoute: LoginIndexRoute,
  LoginErrorIndexRoute: LoginErrorIndexRoute,
  LoginVerifyIndexRoute: LoginVerifyIndexRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

interface ManagerLayoutRouteChildren {
  ManagerLayoutIndexRoute: typeof ManagerLayoutIndexRoute
  ManagerLayoutAccountIndexRoute: typeof ManagerLayoutAccountIndexRoute
  ManagerLayoutDashboardIndexRoute: typeof ManagerLayoutDashboardIndexRoute
  ManagerLayoutRepositoriesIndexRoute: typeof ManagerLayoutRepositoriesIndexRoute
  ManagerLayoutUsersIndexRoute: typeof ManagerLayoutUsersIndexRoute
  ManagerLayoutRepositoriesIdIndexRoute: typeof ManagerLayoutRepositoriesIdIndexRoute
}

const ManagerLayoutRouteChildren: ManagerLayoutRouteChildren = {
  ManagerLayoutIndexRoute: ManagerLayoutIndexRoute,
  ManagerLayoutAccountIndexRoute: ManagerLayoutAccountIndexRoute,
  ManagerLayoutDashboardIndexRoute: ManagerLayoutDashboardIndexRoute,
  ManagerLayoutRepositoriesIndexRoute: ManagerLayoutRepositoriesIndexRoute,
  ManagerLayoutUsersIndexRoute: ManagerLayoutUsersIndexRoute,
  ManagerLayoutRepositoriesIdIndexRoute: ManagerLayoutRepositoriesIdIndexRoute,
}

const ManagerLayoutRouteWithChildren = ManagerLayoutRoute._addFileChildren(
  ManagerLayoutRouteChildren,
)

interface ManagerRouteChildren {
  ManagerLayoutRoute: typeof ManagerLayoutRouteWithChildren
}

const ManagerRouteChildren: ManagerRouteChildren = {
  ManagerLayoutRoute: ManagerLayoutRouteWithChildren,
}

const ManagerRouteWithChildren =
  ManagerRoute._addFileChildren(ManagerRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppLayoutDesktopOnlyRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/manager': typeof ManagerLayoutRouteWithChildren
  '/planet/$id': typeof PlanetIdRoute
  '/login/': typeof LoginIndexRoute
  '/app/': typeof AppLayoutIndexRoute
  '/login/error': typeof LoginErrorIndexRoute
  '/login/verify': typeof LoginVerifyIndexRoute
  '/manager/': typeof ManagerLayoutIndexRoute
  '/app/account': typeof AppLayoutAccountIndexRoute
  '/app/repositories': typeof AppLayoutRepositoriesIndexRoute
  '/manager/account': typeof ManagerLayoutAccountIndexRoute
  '/manager/dashboard': typeof ManagerLayoutDashboardIndexRoute
  '/manager/repositories': typeof ManagerLayoutRepositoriesIndexRoute
  '/manager/users': typeof ManagerLayoutUsersIndexRoute
  '/app/repositories/$id': typeof AppLayoutDesktopOnlyRepositoriesIdIndexRoute
  '/manager/repositories/$id': typeof ManagerLayoutRepositoriesIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppLayoutIndexRoute
  '/manager': typeof ManagerLayoutIndexRoute
  '/planet/$id': typeof PlanetIdRoute
  '/login': typeof LoginIndexRoute
  '/login/error': typeof LoginErrorIndexRoute
  '/login/verify': typeof LoginVerifyIndexRoute
  '/app/account': typeof AppLayoutAccountIndexRoute
  '/app/repositories': typeof AppLayoutRepositoriesIndexRoute
  '/manager/account': typeof ManagerLayoutAccountIndexRoute
  '/manager/dashboard': typeof ManagerLayoutDashboardIndexRoute
  '/manager/repositories': typeof ManagerLayoutRepositoriesIndexRoute
  '/manager/users': typeof ManagerLayoutUsersIndexRoute
  '/app/repositories/$id': typeof AppLayoutDesktopOnlyRepositoriesIdIndexRoute
  '/manager/repositories/$id': typeof ManagerLayoutRepositoriesIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/manager': typeof ManagerRouteWithChildren
  '/app/_layout': typeof AppLayoutRouteWithChildren
  '/app/_layout-desktop-only': typeof AppLayoutDesktopOnlyRouteWithChildren
  '/manager/_layout': typeof ManagerLayoutRouteWithChildren
  '/planet/$id': typeof PlanetIdRoute
  '/login/': typeof LoginIndexRoute
  '/app/_layout/': typeof AppLayoutIndexRoute
  '/login/error/': typeof LoginErrorIndexRoute
  '/login/verify/': typeof LoginVerifyIndexRoute
  '/manager/_layout/': typeof ManagerLayoutIndexRoute
  '/app/_layout/account/': typeof AppLayoutAccountIndexRoute
  '/app/_layout/repositories/': typeof AppLayoutRepositoriesIndexRoute
  '/manager/_layout/account/': typeof ManagerLayoutAccountIndexRoute
  '/manager/_layout/dashboard/': typeof ManagerLayoutDashboardIndexRoute
  '/manager/_layout/repositories/': typeof ManagerLayoutRepositoriesIndexRoute
  '/manager/_layout/users/': typeof ManagerLayoutUsersIndexRoute
  '/app/_layout-desktop-only/repositories/$id/': typeof AppLayoutDesktopOnlyRepositoriesIdIndexRoute
  '/manager/_layout/repositories/$id/': typeof ManagerLayoutRepositoriesIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/login'
    | '/manager'
    | '/planet/$id'
    | '/login/'
    | '/app/'
    | '/login/error'
    | '/login/verify'
    | '/manager/'
    | '/app/account'
    | '/app/repositories'
    | '/manager/account'
    | '/manager/dashboard'
    | '/manager/repositories'
    | '/manager/users'
    | '/app/repositories/$id'
    | '/manager/repositories/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/manager'
    | '/planet/$id'
    | '/login'
    | '/login/error'
    | '/login/verify'
    | '/app/account'
    | '/app/repositories'
    | '/manager/account'
    | '/manager/dashboard'
    | '/manager/repositories'
    | '/manager/users'
    | '/app/repositories/$id'
    | '/manager/repositories/$id'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/login'
    | '/manager'
    | '/app/_layout'
    | '/app/_layout-desktop-only'
    | '/manager/_layout'
    | '/planet/$id'
    | '/login/'
    | '/app/_layout/'
    | '/login/error/'
    | '/login/verify/'
    | '/manager/_layout/'
    | '/app/_layout/account/'
    | '/app/_layout/repositories/'
    | '/manager/_layout/account/'
    | '/manager/_layout/dashboard/'
    | '/manager/_layout/repositories/'
    | '/manager/_layout/users/'
    | '/app/_layout-desktop-only/repositories/$id/'
    | '/manager/_layout/repositories/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRouteWithChildren
  ManagerRoute: typeof ManagerRouteWithChildren
  PlanetIdRoute: typeof PlanetIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRouteWithChildren,
  ManagerRoute: ManagerRouteWithChildren,
  PlanetIdRoute: PlanetIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/login",
        "/manager",
        "/planet/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/_layout",
        "/app/_layout-desktop-only"
      ]
    },
    "/login": {
      "filePath": "login.tsx",
      "children": [
        "/login/",
        "/login/error/",
        "/login/verify/"
      ]
    },
    "/manager": {
      "filePath": "manager.tsx",
      "children": [
        "/manager/_layout"
      ]
    },
    "/app/_layout": {
      "filePath": "app/_layout.tsx",
      "parent": "/app",
      "children": [
        "/app/_layout/",
        "/app/_layout/account/",
        "/app/_layout/repositories/"
      ]
    },
    "/app/_layout-desktop-only": {
      "filePath": "app/_layout-desktop-only.tsx",
      "parent": "/app",
      "children": [
        "/app/_layout-desktop-only/repositories/$id/"
      ]
    },
    "/manager/_layout": {
      "filePath": "manager/_layout.tsx",
      "parent": "/manager",
      "children": [
        "/manager/_layout/",
        "/manager/_layout/account/",
        "/manager/_layout/dashboard/",
        "/manager/_layout/repositories/",
        "/manager/_layout/users/",
        "/manager/_layout/repositories/$id/"
      ]
    },
    "/planet/$id": {
      "filePath": "planet.$id.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx",
      "parent": "/login"
    },
    "/app/_layout/": {
      "filePath": "app/_layout/index.tsx",
      "parent": "/app/_layout"
    },
    "/login/error/": {
      "filePath": "login/error.index.tsx",
      "parent": "/login"
    },
    "/login/verify/": {
      "filePath": "login/verify.index.tsx",
      "parent": "/login"
    },
    "/manager/_layout/": {
      "filePath": "manager/_layout/index.tsx",
      "parent": "/manager/_layout"
    },
    "/app/_layout/account/": {
      "filePath": "app/_layout/account.index.tsx",
      "parent": "/app/_layout"
    },
    "/app/_layout/repositories/": {
      "filePath": "app/_layout/repositories.index.tsx",
      "parent": "/app/_layout"
    },
    "/manager/_layout/account/": {
      "filePath": "manager/_layout/account.index.tsx",
      "parent": "/manager/_layout"
    },
    "/manager/_layout/dashboard/": {
      "filePath": "manager/_layout/dashboard.index.tsx",
      "parent": "/manager/_layout"
    },
    "/manager/_layout/repositories/": {
      "filePath": "manager/_layout/repositories.index.tsx",
      "parent": "/manager/_layout"
    },
    "/manager/_layout/users/": {
      "filePath": "manager/_layout/users.index.tsx",
      "parent": "/manager/_layout"
    },
    "/app/_layout-desktop-only/repositories/$id/": {
      "filePath": "app/_layout-desktop-only/repositories.$id.index.tsx",
      "parent": "/app/_layout-desktop-only"
    },
    "/manager/_layout/repositories/$id/": {
      "filePath": "manager/_layout/repositories.$id.index.tsx",
      "parent": "/manager/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
