/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ManagerRouteRouteImport } from './routes/manager/route'
import { Route as LoginRouteRouteImport } from './routes/login/route'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ManagerIndexRouteImport } from './routes/manager/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as ManagerUsersIndexRouteImport } from './routes/manager/users/index'
import { Route as ManagerDashboardIndexRouteImport } from './routes/manager/dashboard.index'
import { Route as ManagerBooksIndexRouteImport } from './routes/manager/books/index'
import { Route as ManagerAccountIndexRouteImport } from './routes/manager/account.index'
import { Route as LoginVerifyIndexRouteImport } from './routes/login/verify.index'
import { Route as LoginErrorIndexRouteImport } from './routes/login/error.index'
import { Route as AppBooksIndexRouteImport } from './routes/app/books/index'
import { Route as AppAccountIndexRouteImport } from './routes/app/account.index'
import { Route as ManagerUsersNewIndexRouteImport } from './routes/manager/users/new.index'
import { Route as ManagerUsersIdIndexRouteImport } from './routes/manager/users/$id.index'
import { Route as ManagerBooksNewIndexRouteImport } from './routes/manager/books/new.index'
import { Route as ManagerBooksIdIndexRouteImport } from './routes/manager/books/$id.index'
import { Route as AppBooksIdIndexRouteImport } from './routes/app/books/$id.index'
import { Route as ManagerUsersIdUpdateIndexRouteImport } from './routes/manager/users/$id.update.index'
import { Route as ManagerBooksIdUpdateIndexRouteImport } from './routes/manager/books/$id.update.index'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc.$'
import { ServerRoute as ApiRestSplatServerRouteImport } from './routes/api/rest.$'
import { ServerRoute as ApiOpenapiAuthServerRouteImport } from './routes/api/openapi/auth'
import { ServerRoute as ApiOpenapiAppServerRouteImport } from './routes/api/openapi/app'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'
import { ServerRoute as ApiOpenapiAuthSchemaServerRouteImport } from './routes/api/openapi/auth.schema'
import { ServerRoute as ApiOpenapiAppSchemaServerRouteImport } from './routes/api/openapi/app.schema'
import { ServerRoute as ApiDevEmailTemplateServerRouteImport } from './routes/api/dev.email.$template'

const rootServerRouteImport = createServerRootRoute()

const ManagerRouteRoute = ManagerRouteRouteImport.update({
  id: '/manager',
  path: '/manager',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRouteRoute = LoginRouteRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerIndexRoute = ManagerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRouteRoute,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const ManagerUsersIndexRoute = ManagerUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerDashboardIndexRoute = ManagerDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerBooksIndexRoute = ManagerBooksIndexRouteImport.update({
  id: '/books/',
  path: '/books/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerAccountIndexRoute = ManagerAccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const LoginVerifyIndexRoute = LoginVerifyIndexRouteImport.update({
  id: '/verify/',
  path: '/verify/',
  getParentRoute: () => LoginRouteRoute,
} as any)
const LoginErrorIndexRoute = LoginErrorIndexRouteImport.update({
  id: '/error/',
  path: '/error/',
  getParentRoute: () => LoginRouteRoute,
} as any)
const AppBooksIndexRoute = AppBooksIndexRouteImport.update({
  id: '/books/',
  path: '/books/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppAccountIndexRoute = AppAccountIndexRouteImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => AppRouteRoute,
} as any)
const ManagerUsersNewIndexRoute = ManagerUsersNewIndexRouteImport.update({
  id: '/users/new/',
  path: '/users/new/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerUsersIdIndexRoute = ManagerUsersIdIndexRouteImport.update({
  id: '/users/$id/',
  path: '/users/$id/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerBooksNewIndexRoute = ManagerBooksNewIndexRouteImport.update({
  id: '/books/new/',
  path: '/books/new/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const ManagerBooksIdIndexRoute = ManagerBooksIdIndexRouteImport.update({
  id: '/books/$id/',
  path: '/books/$id/',
  getParentRoute: () => ManagerRouteRoute,
} as any)
const AppBooksIdIndexRoute = AppBooksIdIndexRouteImport.update({
  id: '/books/$id/',
  path: '/books/$id/',
  getParentRoute: () => AppRouteRoute,
} as any)
const ManagerUsersIdUpdateIndexRoute =
  ManagerUsersIdUpdateIndexRouteImport.update({
    id: '/users/$id/update/',
    path: '/users/$id/update/',
    getParentRoute: () => ManagerRouteRoute,
  } as any)
const ManagerBooksIdUpdateIndexRoute =
  ManagerBooksIdUpdateIndexRouteImport.update({
    id: '/books/$id/update/',
    path: '/books/$id/update/',
    getParentRoute: () => ManagerRouteRoute,
  } as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRestSplatServerRoute = ApiRestSplatServerRouteImport.update({
  id: '/api/rest/$',
  path: '/api/rest/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiOpenapiAuthServerRoute = ApiOpenapiAuthServerRouteImport.update({
  id: '/api/openapi/auth',
  path: '/api/openapi/auth',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiOpenapiAppServerRoute = ApiOpenapiAppServerRouteImport.update({
  id: '/api/openapi/app',
  path: '/api/openapi/app',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiOpenapiAuthSchemaServerRoute =
  ApiOpenapiAuthSchemaServerRouteImport.update({
    id: '/schema',
    path: '/schema',
    getParentRoute: () => ApiOpenapiAuthServerRoute,
  } as any)
const ApiOpenapiAppSchemaServerRoute =
  ApiOpenapiAppSchemaServerRouteImport.update({
    id: '/schema',
    path: '/schema',
    getParentRoute: () => ApiOpenapiAppServerRoute,
  } as any)
const ApiDevEmailTemplateServerRoute =
  ApiDevEmailTemplateServerRouteImport.update({
    id: '/api/dev/email/$template',
    path: '/api/dev/email/$template',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/app/account': typeof AppAccountIndexRoute
  '/app/books': typeof AppBooksIndexRoute
  '/login/error': typeof LoginErrorIndexRoute
  '/login/verify': typeof LoginVerifyIndexRoute
  '/manager/account': typeof ManagerAccountIndexRoute
  '/manager/books': typeof ManagerBooksIndexRoute
  '/manager/dashboard': typeof ManagerDashboardIndexRoute
  '/manager/users': typeof ManagerUsersIndexRoute
  '/app/books/$id': typeof AppBooksIdIndexRoute
  '/manager/books/$id': typeof ManagerBooksIdIndexRoute
  '/manager/books/new': typeof ManagerBooksNewIndexRoute
  '/manager/users/$id': typeof ManagerUsersIdIndexRoute
  '/manager/users/new': typeof ManagerUsersNewIndexRoute
  '/manager/books/$id/update': typeof ManagerBooksIdUpdateIndexRoute
  '/manager/users/$id/update': typeof ManagerUsersIdUpdateIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/app': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
  '/manager': typeof ManagerIndexRoute
  '/app/account': typeof AppAccountIndexRoute
  '/app/books': typeof AppBooksIndexRoute
  '/login/error': typeof LoginErrorIndexRoute
  '/login/verify': typeof LoginVerifyIndexRoute
  '/manager/account': typeof ManagerAccountIndexRoute
  '/manager/books': typeof ManagerBooksIndexRoute
  '/manager/dashboard': typeof ManagerDashboardIndexRoute
  '/manager/users': typeof ManagerUsersIndexRoute
  '/app/books/$id': typeof AppBooksIdIndexRoute
  '/manager/books/$id': typeof ManagerBooksIdIndexRoute
  '/manager/books/new': typeof ManagerBooksNewIndexRoute
  '/manager/users/$id': typeof ManagerUsersIdIndexRoute
  '/manager/users/new': typeof ManagerUsersNewIndexRoute
  '/manager/books/$id/update': typeof ManagerBooksIdUpdateIndexRoute
  '/manager/users/$id/update': typeof ManagerUsersIdUpdateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRouteRouteWithChildren
  '/manager': typeof ManagerRouteRouteWithChildren
  '/app/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/app/account/': typeof AppAccountIndexRoute
  '/app/books/': typeof AppBooksIndexRoute
  '/login/error/': typeof LoginErrorIndexRoute
  '/login/verify/': typeof LoginVerifyIndexRoute
  '/manager/account/': typeof ManagerAccountIndexRoute
  '/manager/books/': typeof ManagerBooksIndexRoute
  '/manager/dashboard/': typeof ManagerDashboardIndexRoute
  '/manager/users/': typeof ManagerUsersIndexRoute
  '/app/books/$id/': typeof AppBooksIdIndexRoute
  '/manager/books/$id/': typeof ManagerBooksIdIndexRoute
  '/manager/books/new/': typeof ManagerBooksNewIndexRoute
  '/manager/users/$id/': typeof ManagerUsersIdIndexRoute
  '/manager/users/new/': typeof ManagerUsersNewIndexRoute
  '/manager/books/$id/update/': typeof ManagerBooksIdUpdateIndexRoute
  '/manager/users/$id/update/': typeof ManagerUsersIdUpdateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/login'
    | '/manager'
    | '/app/'
    | '/login/'
    | '/manager/'
    | '/app/account'
    | '/app/books'
    | '/login/error'
    | '/login/verify'
    | '/manager/account'
    | '/manager/books'
    | '/manager/dashboard'
    | '/manager/users'
    | '/app/books/$id'
    | '/manager/books/$id'
    | '/manager/books/new'
    | '/manager/users/$id'
    | '/manager/users/new'
    | '/manager/books/$id/update'
    | '/manager/users/$id/update'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/app'
    | '/login'
    | '/manager'
    | '/app/account'
    | '/app/books'
    | '/login/error'
    | '/login/verify'
    | '/manager/account'
    | '/manager/books'
    | '/manager/dashboard'
    | '/manager/users'
    | '/app/books/$id'
    | '/manager/books/$id'
    | '/manager/books/new'
    | '/manager/users/$id'
    | '/manager/users/new'
    | '/manager/books/$id/update'
    | '/manager/users/$id/update'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/login'
    | '/manager'
    | '/app/'
    | '/login/'
    | '/manager/'
    | '/app/account/'
    | '/app/books/'
    | '/login/error/'
    | '/login/verify/'
    | '/manager/account/'
    | '/manager/books/'
    | '/manager/dashboard/'
    | '/manager/users/'
    | '/app/books/$id/'
    | '/manager/books/$id/'
    | '/manager/books/new/'
    | '/manager/users/$id/'
    | '/manager/users/new/'
    | '/manager/books/$id/update/'
    | '/manager/users/$id/update/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  LoginRouteRoute: typeof LoginRouteRouteWithChildren
  ManagerRouteRoute: typeof ManagerRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/openapi/app': typeof ApiOpenapiAppServerRouteWithChildren
  '/api/openapi/auth': typeof ApiOpenapiAuthServerRouteWithChildren
  '/api/rest/$': typeof ApiRestSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
  '/api/dev/email/$template': typeof ApiDevEmailTemplateServerRoute
  '/api/openapi/app/schema': typeof ApiOpenapiAppSchemaServerRoute
  '/api/openapi/auth/schema': typeof ApiOpenapiAuthSchemaServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/openapi/app': typeof ApiOpenapiAppServerRouteWithChildren
  '/api/openapi/auth': typeof ApiOpenapiAuthServerRouteWithChildren
  '/api/rest/$': typeof ApiRestSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
  '/api/dev/email/$template': typeof ApiDevEmailTemplateServerRoute
  '/api/openapi/app/schema': typeof ApiOpenapiAppSchemaServerRoute
  '/api/openapi/auth/schema': typeof ApiOpenapiAuthSchemaServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/openapi/app': typeof ApiOpenapiAppServerRouteWithChildren
  '/api/openapi/auth': typeof ApiOpenapiAuthServerRouteWithChildren
  '/api/rest/$': typeof ApiRestSplatServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
  '/api/dev/email/$template': typeof ApiDevEmailTemplateServerRoute
  '/api/openapi/app/schema': typeof ApiOpenapiAppSchemaServerRoute
  '/api/openapi/auth/schema': typeof ApiOpenapiAuthSchemaServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/auth/$'
    | '/api/openapi/app'
    | '/api/openapi/auth'
    | '/api/rest/$'
    | '/api/rpc/$'
    | '/api/dev/email/$template'
    | '/api/openapi/app/schema'
    | '/api/openapi/auth/schema'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/auth/$'
    | '/api/openapi/app'
    | '/api/openapi/auth'
    | '/api/rest/$'
    | '/api/rpc/$'
    | '/api/dev/email/$template'
    | '/api/openapi/app/schema'
    | '/api/openapi/auth/schema'
  id:
    | '__root__'
    | '/api/auth/$'
    | '/api/openapi/app'
    | '/api/openapi/auth'
    | '/api/rest/$'
    | '/api/rpc/$'
    | '/api/dev/email/$template'
    | '/api/openapi/app/schema'
    | '/api/openapi/auth/schema'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiOpenapiAppServerRoute: typeof ApiOpenapiAppServerRouteWithChildren
  ApiOpenapiAuthServerRoute: typeof ApiOpenapiAuthServerRouteWithChildren
  ApiRestSplatServerRoute: typeof ApiRestSplatServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
  ApiDevEmailTemplateServerRoute: typeof ApiDevEmailTemplateServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager/': {
      id: '/manager/'
      path: '/'
      fullPath: '/manager/'
      preLoaderRoute: typeof ManagerIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/manager/users/': {
      id: '/manager/users/'
      path: '/users'
      fullPath: '/manager/users'
      preLoaderRoute: typeof ManagerUsersIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/dashboard/': {
      id: '/manager/dashboard/'
      path: '/dashboard'
      fullPath: '/manager/dashboard'
      preLoaderRoute: typeof ManagerDashboardIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/books/': {
      id: '/manager/books/'
      path: '/books'
      fullPath: '/manager/books'
      preLoaderRoute: typeof ManagerBooksIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/account/': {
      id: '/manager/account/'
      path: '/account'
      fullPath: '/manager/account'
      preLoaderRoute: typeof ManagerAccountIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/login/verify/': {
      id: '/login/verify/'
      path: '/verify'
      fullPath: '/login/verify'
      preLoaderRoute: typeof LoginVerifyIndexRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/login/error/': {
      id: '/login/error/'
      path: '/error'
      fullPath: '/login/error'
      preLoaderRoute: typeof LoginErrorIndexRouteImport
      parentRoute: typeof LoginRouteRoute
    }
    '/app/books/': {
      id: '/app/books/'
      path: '/books'
      fullPath: '/app/books'
      preLoaderRoute: typeof AppBooksIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/account/': {
      id: '/app/account/'
      path: '/account'
      fullPath: '/app/account'
      preLoaderRoute: typeof AppAccountIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/manager/users/new/': {
      id: '/manager/users/new/'
      path: '/users/new'
      fullPath: '/manager/users/new'
      preLoaderRoute: typeof ManagerUsersNewIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/users/$id/': {
      id: '/manager/users/$id/'
      path: '/users/$id'
      fullPath: '/manager/users/$id'
      preLoaderRoute: typeof ManagerUsersIdIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/books/new/': {
      id: '/manager/books/new/'
      path: '/books/new'
      fullPath: '/manager/books/new'
      preLoaderRoute: typeof ManagerBooksNewIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/books/$id/': {
      id: '/manager/books/$id/'
      path: '/books/$id'
      fullPath: '/manager/books/$id'
      preLoaderRoute: typeof ManagerBooksIdIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/app/books/$id/': {
      id: '/app/books/$id/'
      path: '/books/$id'
      fullPath: '/app/books/$id'
      preLoaderRoute: typeof AppBooksIdIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/manager/users/$id/update/': {
      id: '/manager/users/$id/update/'
      path: '/users/$id/update'
      fullPath: '/manager/users/$id/update'
      preLoaderRoute: typeof ManagerUsersIdUpdateIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
    '/manager/books/$id/update/': {
      id: '/manager/books/$id/update/'
      path: '/books/$id/update'
      fullPath: '/manager/books/$id/update'
      preLoaderRoute: typeof ManagerBooksIdUpdateIndexRouteImport
      parentRoute: typeof ManagerRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rest/$': {
      id: '/api/rest/$'
      path: '/api/rest/$'
      fullPath: '/api/rest/$'
      preLoaderRoute: typeof ApiRestSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/openapi/auth': {
      id: '/api/openapi/auth'
      path: '/api/openapi/auth'
      fullPath: '/api/openapi/auth'
      preLoaderRoute: typeof ApiOpenapiAuthServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/openapi/app': {
      id: '/api/openapi/app'
      path: '/api/openapi/app'
      fullPath: '/api/openapi/app'
      preLoaderRoute: typeof ApiOpenapiAppServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/openapi/auth/schema': {
      id: '/api/openapi/auth/schema'
      path: '/schema'
      fullPath: '/api/openapi/auth/schema'
      preLoaderRoute: typeof ApiOpenapiAuthSchemaServerRouteImport
      parentRoute: typeof ApiOpenapiAuthServerRoute
    }
    '/api/openapi/app/schema': {
      id: '/api/openapi/app/schema'
      path: '/schema'
      fullPath: '/api/openapi/app/schema'
      preLoaderRoute: typeof ApiOpenapiAppSchemaServerRouteImport
      parentRoute: typeof ApiOpenapiAppServerRoute
    }
    '/api/dev/email/$template': {
      id: '/api/dev/email/$template'
      path: '/api/dev/email/$template'
      fullPath: '/api/dev/email/$template'
      preLoaderRoute: typeof ApiDevEmailTemplateServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AppRouteRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppAccountIndexRoute: typeof AppAccountIndexRoute
  AppBooksIndexRoute: typeof AppBooksIndexRoute
  AppBooksIdIndexRoute: typeof AppBooksIdIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppAccountIndexRoute: AppAccountIndexRoute,
  AppBooksIndexRoute: AppBooksIndexRoute,
  AppBooksIdIndexRoute: AppBooksIdIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

interface LoginRouteRouteChildren {
  LoginIndexRoute: typeof LoginIndexRoute
  LoginErrorIndexRoute: typeof LoginErrorIndexRoute
  LoginVerifyIndexRoute: typeof LoginVerifyIndexRoute
}

const LoginRouteRouteChildren: LoginRouteRouteChildren = {
  LoginIndexRoute: LoginIndexRoute,
  LoginErrorIndexRoute: LoginErrorIndexRoute,
  LoginVerifyIndexRoute: LoginVerifyIndexRoute,
}

const LoginRouteRouteWithChildren = LoginRouteRoute._addFileChildren(
  LoginRouteRouteChildren,
)

interface ManagerRouteRouteChildren {
  ManagerIndexRoute: typeof ManagerIndexRoute
  ManagerAccountIndexRoute: typeof ManagerAccountIndexRoute
  ManagerBooksIndexRoute: typeof ManagerBooksIndexRoute
  ManagerDashboardIndexRoute: typeof ManagerDashboardIndexRoute
  ManagerUsersIndexRoute: typeof ManagerUsersIndexRoute
  ManagerBooksIdIndexRoute: typeof ManagerBooksIdIndexRoute
  ManagerBooksNewIndexRoute: typeof ManagerBooksNewIndexRoute
  ManagerUsersIdIndexRoute: typeof ManagerUsersIdIndexRoute
  ManagerUsersNewIndexRoute: typeof ManagerUsersNewIndexRoute
  ManagerBooksIdUpdateIndexRoute: typeof ManagerBooksIdUpdateIndexRoute
  ManagerUsersIdUpdateIndexRoute: typeof ManagerUsersIdUpdateIndexRoute
}

const ManagerRouteRouteChildren: ManagerRouteRouteChildren = {
  ManagerIndexRoute: ManagerIndexRoute,
  ManagerAccountIndexRoute: ManagerAccountIndexRoute,
  ManagerBooksIndexRoute: ManagerBooksIndexRoute,
  ManagerDashboardIndexRoute: ManagerDashboardIndexRoute,
  ManagerUsersIndexRoute: ManagerUsersIndexRoute,
  ManagerBooksIdIndexRoute: ManagerBooksIdIndexRoute,
  ManagerBooksNewIndexRoute: ManagerBooksNewIndexRoute,
  ManagerUsersIdIndexRoute: ManagerUsersIdIndexRoute,
  ManagerUsersNewIndexRoute: ManagerUsersNewIndexRoute,
  ManagerBooksIdUpdateIndexRoute: ManagerBooksIdUpdateIndexRoute,
  ManagerUsersIdUpdateIndexRoute: ManagerUsersIdUpdateIndexRoute,
}

const ManagerRouteRouteWithChildren = ManagerRouteRoute._addFileChildren(
  ManagerRouteRouteChildren,
)

interface ApiOpenapiAppServerRouteChildren {
  ApiOpenapiAppSchemaServerRoute: typeof ApiOpenapiAppSchemaServerRoute
}

const ApiOpenapiAppServerRouteChildren: ApiOpenapiAppServerRouteChildren = {
  ApiOpenapiAppSchemaServerRoute: ApiOpenapiAppSchemaServerRoute,
}

const ApiOpenapiAppServerRouteWithChildren =
  ApiOpenapiAppServerRoute._addFileChildren(ApiOpenapiAppServerRouteChildren)

interface ApiOpenapiAuthServerRouteChildren {
  ApiOpenapiAuthSchemaServerRoute: typeof ApiOpenapiAuthSchemaServerRoute
}

const ApiOpenapiAuthServerRouteChildren: ApiOpenapiAuthServerRouteChildren = {
  ApiOpenapiAuthSchemaServerRoute: ApiOpenapiAuthSchemaServerRoute,
}

const ApiOpenapiAuthServerRouteWithChildren =
  ApiOpenapiAuthServerRoute._addFileChildren(ApiOpenapiAuthServerRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  LoginRouteRoute: LoginRouteRouteWithChildren,
  ManagerRouteRoute: ManagerRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiOpenapiAppServerRoute: ApiOpenapiAppServerRouteWithChildren,
  ApiOpenapiAuthServerRoute: ApiOpenapiAuthServerRouteWithChildren,
  ApiRestSplatServerRoute: ApiRestSplatServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
  ApiDevEmailTemplateServerRoute: ApiDevEmailTemplateServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
