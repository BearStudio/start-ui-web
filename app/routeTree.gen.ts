/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ManagerImport } from './routes/manager'
import { Route as LoginImport } from './routes/login'
import { Route as AppImport } from './routes/app'
import { Route as IndexImport } from './routes/index'
import { Route as ManagerIndexImport } from './routes/manager/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as PlanetIdImport } from './routes/planet.$id'
import { Route as LoginVerifyIndexImport } from './routes/login/verify.index'
import { Route as LoginErrorIndexImport } from './routes/login/error.index'
import { Route as AppRepositoryIndexImport } from './routes/app/repository.index'
import { Route as AppAccountIndexImport } from './routes/app/account.index'

// Create/Update Routes

const ManagerRoute = ManagerImport.update({
  id: '/manager',
  path: '/manager',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ManagerIndexRoute = ManagerIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ManagerRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LoginRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const PlanetIdRoute = PlanetIdImport.update({
  id: '/planet/$id',
  path: '/planet/$id',
  getParentRoute: () => rootRoute,
} as any)

const LoginVerifyIndexRoute = LoginVerifyIndexImport.update({
  id: '/verify/',
  path: '/verify/',
  getParentRoute: () => LoginRoute,
} as any)

const LoginErrorIndexRoute = LoginErrorIndexImport.update({
  id: '/error/',
  path: '/error/',
  getParentRoute: () => LoginRoute,
} as any)

const AppRepositoryIndexRoute = AppRepositoryIndexImport.update({
  id: '/repository/',
  path: '/repository/',
  getParentRoute: () => AppRoute,
} as any)

const AppAccountIndexRoute = AppAccountIndexImport.update({
  id: '/account/',
  path: '/account/',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/manager': {
      id: '/manager'
      path: '/manager'
      fullPath: '/manager'
      preLoaderRoute: typeof ManagerImport
      parentRoute: typeof rootRoute
    }
    '/planet/$id': {
      id: '/planet/$id'
      path: '/planet/$id'
      fullPath: '/planet/$id'
      preLoaderRoute: typeof PlanetIdImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/login/': {
      id: '/login/'
      path: '/'
      fullPath: '/login/'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof LoginImport
    }
    '/manager/': {
      id: '/manager/'
      path: '/'
      fullPath: '/manager/'
      preLoaderRoute: typeof ManagerIndexImport
      parentRoute: typeof ManagerImport
    }
    '/app/account/': {
      id: '/app/account/'
      path: '/account'
      fullPath: '/app/account'
      preLoaderRoute: typeof AppAccountIndexImport
      parentRoute: typeof AppImport
    }
    '/app/repository/': {
      id: '/app/repository/'
      path: '/repository'
      fullPath: '/app/repository'
      preLoaderRoute: typeof AppRepositoryIndexImport
      parentRoute: typeof AppImport
    }
    '/login/error/': {
      id: '/login/error/'
      path: '/error'
      fullPath: '/login/error'
      preLoaderRoute: typeof LoginErrorIndexImport
      parentRoute: typeof LoginImport
    }
    '/login/verify/': {
      id: '/login/verify/'
      path: '/verify'
      fullPath: '/login/verify'
      preLoaderRoute: typeof LoginVerifyIndexImport
      parentRoute: typeof LoginImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppAccountIndexRoute: typeof AppAccountIndexRoute
  AppRepositoryIndexRoute: typeof AppRepositoryIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppAccountIndexRoute: AppAccountIndexRoute,
  AppRepositoryIndexRoute: AppRepositoryIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface LoginRouteChildren {
  LoginIndexRoute: typeof LoginIndexRoute
  LoginErrorIndexRoute: typeof LoginErrorIndexRoute
  LoginVerifyIndexRoute: typeof LoginVerifyIndexRoute
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginIndexRoute: LoginIndexRoute,
  LoginErrorIndexRoute: LoginErrorIndexRoute,
  LoginVerifyIndexRoute: LoginVerifyIndexRoute,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

interface ManagerRouteChildren {
  ManagerIndexRoute: typeof ManagerIndexRoute
}

const ManagerRouteChildren: ManagerRouteChildren = {
  ManagerIndexRoute: ManagerIndexRoute,
}

const ManagerRouteWithChildren =
  ManagerRoute._addFileChildren(ManagerRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/manager': typeof ManagerRouteWithChildren
  '/planet/$id': typeof PlanetIdRoute
  '/app/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/app/account': typeof AppAccountIndexRoute
  '/app/repository': typeof AppRepositoryIndexRoute
  '/login/error': typeof LoginErrorIndexRoute
  '/login/verify': typeof LoginVerifyIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/planet/$id': typeof PlanetIdRoute
  '/app': typeof AppIndexRoute
  '/login': typeof LoginIndexRoute
  '/manager': typeof ManagerIndexRoute
  '/app/account': typeof AppAccountIndexRoute
  '/app/repository': typeof AppRepositoryIndexRoute
  '/login/error': typeof LoginErrorIndexRoute
  '/login/verify': typeof LoginVerifyIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/app': typeof AppRouteWithChildren
  '/login': typeof LoginRouteWithChildren
  '/manager': typeof ManagerRouteWithChildren
  '/planet/$id': typeof PlanetIdRoute
  '/app/': typeof AppIndexRoute
  '/login/': typeof LoginIndexRoute
  '/manager/': typeof ManagerIndexRoute
  '/app/account/': typeof AppAccountIndexRoute
  '/app/repository/': typeof AppRepositoryIndexRoute
  '/login/error/': typeof LoginErrorIndexRoute
  '/login/verify/': typeof LoginVerifyIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/login'
    | '/manager'
    | '/planet/$id'
    | '/app/'
    | '/login/'
    | '/manager/'
    | '/app/account'
    | '/app/repository'
    | '/login/error'
    | '/login/verify'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/planet/$id'
    | '/app'
    | '/login'
    | '/manager'
    | '/app/account'
    | '/app/repository'
    | '/login/error'
    | '/login/verify'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/login'
    | '/manager'
    | '/planet/$id'
    | '/app/'
    | '/login/'
    | '/manager/'
    | '/app/account/'
    | '/app/repository/'
    | '/login/error/'
    | '/login/verify/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRouteWithChildren
  ManagerRoute: typeof ManagerRouteWithChildren
  PlanetIdRoute: typeof PlanetIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRouteWithChildren,
  ManagerRoute: ManagerRouteWithChildren,
  PlanetIdRoute: PlanetIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/login",
        "/manager",
        "/planet/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/",
        "/app/account/",
        "/app/repository/"
      ]
    },
    "/login": {
      "filePath": "login.tsx",
      "children": [
        "/login/",
        "/login/error/",
        "/login/verify/"
      ]
    },
    "/manager": {
      "filePath": "manager.tsx",
      "children": [
        "/manager/"
      ]
    },
    "/planet/$id": {
      "filePath": "planet.$id.tsx"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    },
    "/login/": {
      "filePath": "login/index.tsx",
      "parent": "/login"
    },
    "/manager/": {
      "filePath": "manager/index.tsx",
      "parent": "/manager"
    },
    "/app/account/": {
      "filePath": "app/account.index.tsx",
      "parent": "/app"
    },
    "/app/repository/": {
      "filePath": "app/repository.index.tsx",
      "parent": "/app"
    },
    "/login/error/": {
      "filePath": "login/error.index.tsx",
      "parent": "/login"
    },
    "/login/verify/": {
      "filePath": "login/verify.index.tsx",
      "parent": "/login"
    }
  }
}
ROUTE_MANIFEST_END */
